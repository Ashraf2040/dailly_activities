generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  name      String
  password  String
  role      String
  classes   Class[]  @relation("TeacherClasses")
  subjects  Subject[] @relation("TeacherSubjects")
  lessons   Lesson[]
}

model Class {
  id          String       @id @default(uuid())
  name        String
  teachers    User[]       @relation("TeacherClasses")
  lessons     Lesson[]
  // weeklyPlans removed after migration; keep transitional link below on WeeklyPlan
}

model Subject {
  id              String           @id @default(uuid())
  name            String
  teachers        User[]           @relation("TeacherSubjects")
  lessons         Lesson[]
  weeklyPlanItems WeeklyPlanItem[]
  grades          GradeSubject[]
}

model Lesson {
  id         String   @id @default(uuid())
  classId    String
  subjectId  String
  teacherId  String
  date       DateTime
  unit       String
  pages      String
  lesson     String
  objective  String
  homework   String?
  createdAt  DateTime @default(now())
  comments   String?
  class      Class    @relation(fields: [classId], references: [id])
  subject    Subject  @relation(fields: [subjectId], references: [id])
  teacher    User     @relation(fields: [teacherId], references: [id])
}

model Grade {
  id        String         @id @default(uuid())
  name      String         @unique
  subjects  GradeSubject[]
  plans     WeeklyPlan[]
}

model GradeSubject {
  gradeId   String
  subjectId String
  grade     Grade   @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@id([gradeId, subjectId])
}

model WeeklyPlan {
  id        String   @id @default(uuid())
  gradeId   String?  // TEMP optional for backfill
  week      String
  fromDate  DateTime
  toDate    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  note       String?     // NEW
  dictation  String?     // NEW
  grade     Grade?   @relation(fields: [gradeId], references: [id])
  items     WeeklyPlanItem[]
}

model WeeklyPlanItem {
  id            String     @id @default(uuid())
  weeklyPlanId  String
  subjectId     String
  unit          String
  lessons       String
  pages         String
  homework      String?    // if you want it persisted later
  classwork     String?    // if you want it persisted later
  dictation     String?    // NEW

  weeklyPlan WeeklyPlan @relation(fields: [weeklyPlanId], references: [id], onDelete: Cascade)
  subject    Subject    @relation(fields: [subjectId], references: [id])
}


enum Role {
  TEACHER
  ADMIN
  COORDINATOR
}
